import hudson.node_monitors.*;

def getFreeNode() {
    def nodeName = ''
    def nodeSize = 0
    def maxJobCount = 2
    
    for (node in Jenkins.instance.nodes) {
        computer = node.toComputer()
        if (computer.getChannel() == null) continue
        if (node.getComputer().countBusy() >= maxJobCount) continue
    
        diskSpace = DiskSpaceMonitor.DESCRIPTOR.get(computer)
        if (diskSpace != null) {
            size = diskSpace.size
            if (size > nodeSize) {
                nodeName = node.getDisplayName();
                nodeSize = size;
            }
        }
    }
    
    return nodeName
}

def build_node = getFreeNode()
def docker_host = 'unix:///var/run/docker.sock'
println("Build node - ${build_node}")
docker_host = 'tcp://192.168.0.47:2375'
def remote_docker_host   = 'tcp://192.168.0.47:2375'
def sns_info_channel_id  = '2793000324064885'
def sns_error_channel_id = '2793000324064885'

//node(build_node) {
node() {
    def commit_id
    def sns_arn
    def docker_tag

    try {
        def freespace_threshold = 10
        //def git_author_name = 'jenkins'
        //def git_author_email = 'jenkins@purpleworks.co.kr'
        def build_arg_stage = 'staging'
        def registry_url = "192.168.0.40:5000/rfid/spyder-app"

        // sns_arn = 'arn:aws:sns:ap-northeast-2:021369310602:kop-log-sns'
        docker_tag = env.BRANCH_NAME.split('/')[2]
            if(docker_tag == null) {
                docker_tag = 'master'
        }

        stage('Checkout') {
            checkout changelog: true, poll: true, scm: [
                $class: 'GitSCM',
                branches: [[name: "origin/${docker_tag}"]],
                doGenerateSubmoduleConfigurations: false,
                submoduleCfg: [],
                userRemoteConfigs: [[
                    credentialsId: 'jenkins_ssh',
                    url: "git@gitlab.com:systemkdevgroup/rfidretail.git"
                ]]
            ]
            println("branch_name : ${docker_tag}")
        }

        stage('Commit') {
            commit_id = sh(returnStdout: true, script: 'git rev-parse HEAD').trim().take(6)
            println("commit id - ${commit_id}")

            root = File.listRoots()[0];
            space = (int)(root.getFreeSpace() / 1073741824)
            println('disk space : ' + space + 'G')
            if(space < freespace_threshold) {
                throw new Exception('빌드 디스크 공간부족')
            }

            build_user = 'unknown'
            wrap([$class: 'BuildUser']) {
                build_tag = "${BUILD_TAG}"
                try {
                    build_user = "${BUILD_USER}"
                } catch(e) {}
            }

            currentBuild.description = "⚙️ ${build_tag} / ${docker_tag} / ${commit_id} by ${build_user}"
            message = "⚙️ ${build_tag} / ${docker_tag} / ${commit_id} - 빌드시작! by ${build_user}"
            println(message)
            // snsPublish(topicArn: sns_arn, subject: sns_info_channel_id, message: message)
        }

        stage('Build & Push') {
            withEnv(['DOCKER_HOST=' + docker_host]) {
                sh """
					docker build --force-rm=true -t ${registry_url}:latest .
				"""

                // sh(script: '$(~/.local/bin/aws ecr get-login --no-include-email)')

                sh """
					docker push ${registry_url}:latest
				"""
            }
            // snsPublish(topicArn: sns_arn, subject: 'info', message: message)
        }

        stage('Restart') {
            withEnv(['DOCKER_HOST=' + remote_docker_host]) {
                sh """
                    docker-compose pull
                    docker-compose down
                    docker-compose up -d
                """
            }
            // snsPublish(topicArn: sns_arn, subject: 'info', message: message)
        }

        stage('Complete') {
            message = "👍 ${build_tag} / ${docker_tag} / ${commit_id} - 빌드완료!"
            // snsPublish(topicArn: sns_arn, subject: sns_info_channel_id, message: message)
        }
    } catch(hudson.AbortException ae) {
        if(ae.getMessage().contains('143')) {
            message = "⚠️ ${build_tag} / ${docker_tag} / ${commit_id} - 빌드취소! by ${build_user}"
            println(message)
           //  snsPublish(topicArn: sns_arn, subject: sns_info_channel_id, message: message)
        }
        throw ae
    } catch(e) {
        message = "❌ ${build_tag} / ${docker_tag} / ${commit_id} - 빌드오류!\n```\n${e}\n```"
        // snsPublish(topicArn: sns_arn, subject: sns_error_channel_id, message: message)
        throw e
    } finally {
    }  
}
